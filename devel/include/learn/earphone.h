// Generated by gencpp from file learn/earphone.msg
// DO NOT EDIT!


#ifndef LEARN_MESSAGE_EARPHONE_H
#define LEARN_MESSAGE_EARPHONE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace learn
{
template <class ContainerAllocator>
struct earphone_
{
  typedef earphone_<ContainerAllocator> Type;

  earphone_()
    : name()
    , number(0)
    , time(0.0)
    , x(0.0)
    , y(0.0)  {
    }
  earphone_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , number(0)
    , time(0.0)
    , x(0.0)
    , y(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef uint8_t _number_type;
  _number_type number;

   typedef float _time_type;
  _time_type time;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(left)
  #undef left
#endif
#if defined(_WIN32) && defined(reght)
  #undef reght
#endif

  enum {
    left = 1u,
    reght = 2u,
  };


  typedef boost::shared_ptr< ::learn::earphone_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::learn::earphone_<ContainerAllocator> const> ConstPtr;

}; // struct earphone_

typedef ::learn::earphone_<std::allocator<void> > earphone;

typedef boost::shared_ptr< ::learn::earphone > earphonePtr;
typedef boost::shared_ptr< ::learn::earphone const> earphoneConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::learn::earphone_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::learn::earphone_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::learn::earphone_<ContainerAllocator1> & lhs, const ::learn::earphone_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.number == rhs.number &&
    lhs.time == rhs.time &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::learn::earphone_<ContainerAllocator1> & lhs, const ::learn::earphone_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace learn

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::learn::earphone_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::learn::earphone_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::learn::earphone_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::learn::earphone_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::learn::earphone_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::learn::earphone_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::learn::earphone_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0e54ded6bb48427135cdde6b26c23e80";
  }

  static const char* value(const ::learn::earphone_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0e54ded6bb484271ULL;
  static const uint64_t static_value2 = 0x35cdde6b26c23e80ULL;
};

template<class ContainerAllocator>
struct DataType< ::learn::earphone_<ContainerAllocator> >
{
  static const char* value()
  {
    return "learn/earphone";
  }

  static const char* value(const ::learn::earphone_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::learn::earphone_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name\n"
"uint8 number\n"
"float32 time\n"
"float32 x\n"
"float32 y\n"
"\n"
"\n"
"uint8 left=1\n"
"uint8 reght=2\n"
;
  }

  static const char* value(const ::learn::earphone_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::learn::earphone_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.number);
      stream.next(m.time);
      stream.next(m.x);
      stream.next(m.y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct earphone_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::learn::earphone_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::learn::earphone_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "number: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.number);
    s << indent << "time: ";
    Printer<float>::stream(s, indent + "  ", v.time);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LEARN_MESSAGE_EARPHONE_H
